#
# Updater-script for Android Revolution HD
#
# The "0" parameter in format() is file system size. If fs_size = 0, then make_ext4fs uses the entire partition.
# For /tmp files use set_perm and for system files use set_metadata (SElinux)
ui_print("");
ui_print("");
ui_print("=================================");
ui_print("Android Revolution HD by mike1986");
ui_print("=================================");
ui_print("");
ui_print("");
	ui_print(">>> Formatting partitions");
	set_progress(0.10);
	assert(unmount("/system") || ui_print("(system is unmounted already)"));
	format("ext4", "EMMC", "system", "0", "/system");
	assert(unmount("/cache") || ui_print("(cache is unmounted already)"));
	format("ext4", "EMMC", "cache", "0", "/cache");
	# If users selected to wipe /data partition
	assert(mount("ext4", "EMMC", "userdata", "/data") || ui_print("(data is mounted already)"));
	if file_getprop("/tmp/aroma-data/wipe.prop","selected.0") == "2" then
	package_extract_file("common/aroma/wipe/wipe.sh", "/tmp/wipe.sh");
	package_extract_file("common/aroma/wipe/bash", "/tmp/bash");
	set_perm(0, 0, 0777, "/tmp/wipe.sh");
	set_perm(0, 0, 0777, "/tmp/bash");
	run_program("/tmp/wipe.sh");
	endif;
	ui_print("");
	ui_print("");
	ui_print(">>> Mounting partitions");
	set_progress(0.15);
	assert(mount("ext4", "EMMC", "system", "/system") || ui_print("(system is mounted already)"));
	assert(mount("ext4", "EMMC", "userdata", "/data") || ui_print("(data is mounted already)"));
ui_print("");
ui_print("");
ui_print(">>> Cleaning process");
set_progress(0.20);
	package_extract_file("common/aroma/clean.sh", "/tmp/clean.sh");
	set_perm(0, 0, 0777, "/tmp/clean.sh");
	run_program("/tmp/clean.sh");
ui_print("");
ui_print("");
ui_print(">>> Writing Data & System");
set_progress(0.30);
	package_extract_dir("system", "/system");
	package_extract_dir("common/system", "/system");
	package_extract_dir("common/data", "/data");
	# Android 4.4 requires Google Play to be in priv-app instead of app
	run_program("/sbin/busybox", "mv", "-f", "/system/app/com.android.vending-1.apk", "/system/priv-app/com.android.vending-1.apk");

########## AROMA ##########

run_program("/sbin/sync");

# Options for Google Applications

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.1") == "1" then
ui_print(">>> Installing Google Chrome");
	package_extract_dir("common/aroma/gapps/chrome", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.2") == "1" then
ui_print(">>> Installing Google Maps & Google Street");
	package_extract_dir("common/aroma/gapps/maps/4.0", "/data/app");
	package_extract_file("common/aroma/gapps/maps/com.google.android.street-1.apk", "/data/app/com.google.android.street-1.apk");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.3") == "1" then
ui_print(">>> Installing Google Music");
	package_extract_dir("common/aroma/gapps/music", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.4") == "1" then
ui_print(">>> Installing Google Plus");
	package_extract_dir("common/aroma/gapps/plus", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.5") == "1" then
ui_print(">>> Installing Google Now");
	package_extract_dir("common/aroma/gapps/search", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.6") == "1" then
ui_print(">>> Installing Google TalkBack");
	package_extract_dir("common/aroma/gapps/talkback", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.7") == "1" then
ui_print(">>> Installing Google Keep");
	package_extract_dir("common/aroma/gapps/keep", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.8") == "1" then
ui_print(">>> Installing Google Hangouts");
	package_extract_dir("common/aroma/gapps/hangouts", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.9") == "1" then
ui_print(">>> Installing Google YouTube");
	package_extract_dir("common/aroma/gapps/youtube", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/gapps.prop","item.0.10") == "1" then
ui_print(">>> Installing Google Drive");
	package_extract_dir("common/aroma/gapps/drive", "/data/app");
	endif;

# Options for Custom Applications

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.1") == "1" then
ui_print(">>> Installing Dropbox");
	package_extract_dir("common/aroma/capps/dropbox", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.2") == "1" then
ui_print(">>> Installing Sliding Explorer");
	package_extract_dir("common/aroma/capps/explorer", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.3") == "1" then
ui_print(">>> Installing Facebook");
	package_extract_dir("common/aroma/capps/facebook", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.4") == "1" then
ui_print(">>> Installing Adobe Flash Player");
	package_extract_dir("common/aroma/capps/flash/4.0", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.5") == "1" then
ui_print(">>> Installing Adobe Reader");
	package_extract_dir("common/aroma/capps/reader", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/capps.prop","item.0.6") == "1" then
ui_print(">>> Installing Twitter");
	package_extract_dir("common/aroma/capps/twitter", "/data/app");
	endif;

# Options for Tweaks

	if file_getprop("/tmp/aroma-data/tweaks.prop","item.0.1") == "1" then
ui_print(">>> Installing EXT4 Performance Tweak");
	package_extract_dir("common/aroma/tweaks/ext4", "/tmp");
	set_perm(0, 0, 0777, "/tmp/ext4");
	set_perm(0, 0, 0777, "/tmp/tune2fs");
	run_program("/tmp/ext4");
	endif;

	if file_getprop("/tmp/aroma-data/tweaks.prop","item.0.2") == "1" then
ui_print(">>> Installing SQLite Tweaks");
	package_extract_dir("common/aroma/tweaks/sqlite", "/system");
	set_perm(0, 0, 04755, "/system/xbin/sqlite3");
	endif;

	if file_getprop("/tmp/aroma-data/tweaks.prop","item.0.3") == "1" then
ui_print(">>> Installing Seeder");
	package_extract_dir("common/aroma/tweaks/seeder", "/data");
	endif;

	if file_getprop("/tmp/aroma-data/tweaks.prop","item.0.4") == "1" then
ui_print(">>> Installing Xposed");
	package_extract_dir("common/aroma/tweaks/xposed", "/data/app");
	endif;

	if file_getprop("/tmp/aroma-data/tweaks.prop","item.0.5") == "1" then
ui_print(">>> Installing Bytecode Verification disabler");
	package_extract_file("common/aroma/tweaks/dalvik/dalvik.sh", "/tmp/dalvik.sh");
	set_perm(0, 0, 0777, "/tmp/dalvik.sh");
	run_program("/tmp/dalvik.sh");
	endif;

# Options for Themes

	if file_getprop("/tmp/aroma-data/themes.prop","selected.0") == "1" then
ui_print(">>> Installing Flats Theme");
	package_extract_file("common/aroma/themes/flats/Flats.apk", "/data/Flats.apk");
	package_extract_file("common/aroma/themes/flats/theme.sh", "/tmp/theme.sh");
	set_perm(0, 0, 0777, "/tmp/theme.sh");
	run_program("/tmp/theme.sh");
	endif;

	if file_getprop("/tmp/aroma-data/themes.prop","selected.0") == "2" then
ui_print(">>> Installing Holo Sense Theme");
	package_extract_file("common/aroma/themes/holo/HoloSense.apk", "/data/HoloSense.apk");
	package_extract_file("common/aroma/themes/holo/theme.sh", "/tmp/theme.sh");
	set_perm(0, 0, 0777, "/tmp/theme.sh");
	run_program("/tmp/theme.sh");
	endif;

	if file_getprop("/tmp/aroma-data/themes.prop","selected.0") == "3" then
ui_print(">>> Installing Holo Sense Light Theme");
	package_extract_file("common/aroma/themes/hololight/HoloSenseLight.apk", "/data/HoloSenseLight.apk");
	package_extract_file("common/aroma/themes/hololight/theme.sh", "/tmp/theme.sh");
	set_perm(0, 0, 0777, "/tmp/theme.sh");
	run_program("/tmp/theme.sh");
	endif;

	if file_getprop("/tmp/aroma-data/themes.prop","selected.0") == "4" then
ui_print(">>> Installing Mianogen Theme");
	package_extract_file("common/aroma/themes/mianogen/Mianogen.apk", "/data/Mianogen.apk");
	package_extract_file("common/aroma/themes/mianogen/theme.sh", "/tmp/theme.sh");
	set_perm(0, 0, 0777, "/tmp/theme.sh");
	run_program("/tmp/theme.sh");
	endif;

# Options for Bloatware

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.1") == "1" then
ui_print(">>> Removing Apollo");
	delete("/system/app/Apollo.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.2") == "1" then
ui_print(">>> Removing Browser");
	delete("/system/app/Browser.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.3") == "1" then
ui_print(">>> Removing CMAccount");
	delete("/system/app/CMAccount.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.4") == "1" then
ui_print(">>> Removing CMFileManger");
	delete("/system/app/CMFileManager.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.5") == "1" then
ui_print(">>> Removing Email");
	delete("/system/app/Email.apk");
	delete("/system/app/Exchange2.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.6") == "1" then
ui_print(">>> Removing Live Wallpapers");
	delete("/system/app/BasicDreams.apk");
        delete("/system/app/Galaxy4.apk");
	delete("/system/app/HoloSpiralWallpaper.apk");
	delete("/system/app/LiveWallpapers.apk");
	delete("/system/app/MagicSmokeWallpapers.apk");
	delete("/system/app/NoiseField.apk");
	delete("/system/app/PhaseBeam.apk");
	delete("/system/app/VisualizationWallpapers.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.7") == "1" then
ui_print(">>> Removing Video Editor");
	delete("/system/app/VideoEditor.apk");
	endif;

	if file_getprop("/tmp/aroma-data/bloatware.prop","item.0.8") == "1" then
ui_print(">>> Removing WhispherPush");
	delete("/system/app/WhisperPush.apk");
	endif;

########## END OF AROMA ##########

ui_print(">>> Creating toolbox symlinks");
set_progress(0.80);
symlink("toolbox", "/system/bin/cat");
symlink("toolbox", "/system/bin/chcon");
symlink("toolbox", "/system/bin/chmod");
symlink("toolbox", "/system/bin/chown");
symlink("toolbox", "/system/bin/clear");
symlink("toolbox", "/system/bin/cmp");
symlink("toolbox", "/system/bin/cp");
symlink("toolbox", "/system/bin/date");
symlink("toolbox", "/system/bin/dd");
symlink("toolbox", "/system/bin/df");
symlink("toolbox", "/system/bin/dmesg");
symlink("toolbox", "/system/bin/du");
symlink("toolbox", "/system/bin/getenforce");
symlink("toolbox", "/system/bin/getevent");
symlink("toolbox", "/system/bin/getprop");
symlink("toolbox", "/system/bin/getsebool");
symlink("toolbox", "/system/bin/grep");
symlink("toolbox", "/system/bin/hd");
symlink("toolbox", "/system/bin/id");
symlink("toolbox", "/system/bin/ifconfig");
symlink("toolbox", "/system/bin/iftop");
symlink("toolbox", "/system/bin/insmod");
symlink("toolbox", "/system/bin/ioctl");
symlink("toolbox", "/system/bin/ionice");
symlink("toolbox", "/system/bin/kill");
symlink("toolbox", "/system/bin/ln");
symlink("toolbox", "/system/bin/load_policy");
symlink("toolbox", "/system/bin/log");
symlink("toolbox", "/system/bin/ls");
symlink("toolbox", "/system/bin/lsmod");
symlink("toolbox", "/system/bin/lsof");
symlink("toolbox", "/system/bin/md5");
symlink("toolbox", "/system/bin/mkdir");
symlink("toolbox", "/system/bin/mkswap");
symlink("toolbox", "/system/bin/mount");
symlink("toolbox", "/system/bin/mv");
symlink("toolbox", "/system/bin/nandread");
symlink("toolbox", "/system/bin/netstat");
symlink("toolbox", "/system/bin/newfs_msdos");
symlink("toolbox", "/system/bin/notify");
symlink("toolbox", "/system/bin/printenv");
symlink("toolbox", "/system/bin/ps");
symlink("toolbox", "/system/bin/readlink");
symlink("toolbox", "/system/bin/reboot");
symlink("toolbox", "/system/bin/renice");
symlink("toolbox", "/system/bin/restorecon");
symlink("toolbox", "/system/bin/rm");
symlink("toolbox", "/system/bin/rmdir");
symlink("toolbox", "/system/bin/rmmod");
symlink("toolbox", "/system/bin/route");
symlink("toolbox", "/system/bin/runcon");
symlink("toolbox", "/system/bin/schedtop");
symlink("toolbox", "/system/bin/sendevent");
symlink("toolbox", "/system/bin/setconsole");
symlink("toolbox", "/system/bin/setenforce");
symlink("toolbox", "/system/bin/setprop");
symlink("toolbox", "/system/bin/setsebool");
symlink("toolbox", "/system/bin/sleep");
symlink("toolbox", "/system/bin/smd");
symlink("toolbox", "/system/bin/start");
symlink("toolbox", "/system/bin/stop");
symlink("toolbox", "/system/bin/swapoff");
symlink("toolbox", "/system/bin/swapon");
symlink("toolbox", "/system/bin/sync");
symlink("toolbox", "/system/bin/top");
symlink("toolbox", "/system/bin/touch");
symlink("toolbox", "/system/bin/umount");
symlink("toolbox", "/system/bin/uptime");
symlink("toolbox", "/system/bin/vmstat");
symlink("toolbox", "/system/bin/watchprops");
symlink("toolbox", "/system/bin/wipe");
ui_print("");
ui_print("");
ui_print(">>> Creating additional symlinks");
set_progress(0.85);
	symlink("/system/bin/mksh", "/system/bin/sh");
	symlink("/system/fonts/Roboto-Regular.ttf","/system/fonts/DroidSans.ttf");
	symlink("/system/fonts/Roboto-Bold.ttf","/system/fonts/DroidSans-Bold.ttf");
	symlink("/system/lib/modules/moc_crypto.ko.3.4.10","/system/lib/modules/moc_crypto.ko");
	symlink("/system/lib/modules/moc_platform_mod.ko.3.4.10","/system/lib/modules/moc_platform_mod.ko");
	symlink("/system/lib/libGLESv2.so", "/system/lib/libGLESv3.so");
ui_print("");
ui_print("");
ui_print(">>> Installing busybox");
set_progress(0.90);
	set_perm(0, 1000, 0755, "/system/xbin/busybox");
	run_program("/system/xbin/busybox", "--install", "-s", "/system/xbin");
ui_print("");
ui_print("");
ui_print(">>> Setting permissions");
set_progress(0.95);
	set_metadata_recursive("/system", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/bin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/bin/app_process", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:zygote_exec:s0");
		set_metadata("/system/bin/bma150_usr", "uid", 0, "gid", 1000, "mode", 0750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/bin/clatd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:clatd_exec:s0");
		set_metadata("/system/bin/debuggerd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:debuggerd_exec:s0");
		set_metadata("/system/bin/dhcpcd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dhcp_exec:s0");
		set_metadata("/system/bin/dnsmasq", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:dnsmasq_exec:s0");
		set_metadata("/system/bin/drmserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:drmserver_exec:s0");
		set_metadata("/system/bin/hostapd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:hostapd_exec:s0");
		set_metadata("/system/bin/installd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:installd_exec:s0");
		set_metadata("/system/bin/iptables", "uid", 0, "gid", 1000, "mode", 0750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/bin/keystore", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:keystore_exec:s0");
		set_metadata("/system/bin/mediaserver", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mediaserver_exec:s0");
		set_metadata("/system/bin/mksh", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:shell_exec:s0");
		set_metadata("/system/bin/mtpd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:mtp_exec:s0");
		set_metadata("/system/bin/netcfg", "uid", 0, "gid", 3003, "mode", 02750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/bin/netd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:netd_exec:s0");
		set_metadata("/system/bin/ping", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:ping_exec:s0");
		set_metadata("/system/bin/pppd", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:ppp_exec:s0");
		set_metadata("/system/bin/racoon", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:racoon_exec:s0");
		set_metadata("/system/bin/rild", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:rild_exec:s0");
		set_metadata("/system/bin/run-as", "uid", 0, "gid", 2000, "mode", 0750, "capabilities", 0xc0, "selabel", "u:object_r:runas_exec:s0");
		set_metadata("/system/bin/sdcard", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:sdcardd_exec:s0");
		set_metadata("/system/bin/servicemanager", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:servicemanager_exec:s0");
		set_metadata("/system/bin/surfaceflinger", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:surfaceflinger_exec:s0");
		set_metadata("/system/bin/tc", "uid", 0, "gid", 1000, "mode", 0750, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/bin/wpa_supplicant", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:wpa_exec:s0");
	set_metadata_recursive("/system/etc/dhcpcd", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:dhcp_system_file:s0");
		set_metadata("/system/etc/dhcpcd/dhcpcd-run-hooks", "uid", 1014, "gid", 2000, "mode", 0550, "capabilities", 0x0, "selabel", "u:object_r:dhcp_system_file:s0");
		set_metadata("/system/etc/gps.conf", "uid", 1000, "gid", 3003, "mode", 0640, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/etc/hsml.key", "uid", 0, "gid", 0, "mode", 0400, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/etc/ppp", "uid", 0, "gid", 0, "dmode", 0755, "fmode", 0555, "capabilities", 0x0, "selabel", "u:object_r:ppp_system_file:s0");
	set_metadata_recursive("/system/etc/init.d", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/etc/init.d", "uid", 0, "gid", 0, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/firmware", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/lib", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/lib/drm", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/lib/drm/libdrmwvmplugin.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/lib/egl", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/lib/mediadrm", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/lib/mediadrm/libwvdrmengine.so", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/media", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt/models", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt/models/detection", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt/models/detection/multi_pose_face_landmark_detectors.7", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt/models/detection/yaw_roll_face_detectors.6", "uid", 0, "gid", 2000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/vendor/pittpatt/models/recognition", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/vendor/pittpatt/models/recognition/face.face.y0-y0-22-b-N.bin", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
	set_metadata_recursive("/system/xbin", "uid", 0, "gid", 2000, "dmode", 0755, "fmode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/xbin/sysro", "uid", 1000, "gid", 1000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/xbin/sysrw", "uid", 1000, "gid", 1000, "mode", 0755, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/xbin/nc", "uid", 0, "gid", 2000, "mode", 0744, "capabilities", 0x0, "selabel", "u:object_r:system_file:s0");
		set_metadata("/system/xbin/su", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:su_exec:s0");
		set_metadata("/system/xbin/daemonsu", "uid", 0, "gid", 0, "mode", 06755, "capabilities", 0x0, "selabel", "u:object_r:su_exec:s0");
		set_metadata("/system/build.prop", "uid", 0, "gid", 0, "mode", 0644, "capabilities", 0x0);
	set_metadata_recursive("/data/preload", "uid", 0, "gid", 0, "dmode", 0771, "fmode", 0644, "capabilities", 0x0);
ui_print("");
ui_print("");
ui_print(">>> Flashing kernel");
set_progress(0.97);
	# For HTC One WWE only
	assert(package_extract_file("boot.img", "/tmp/boot.img"),
	run_program("/sbin/dd", "if=/tmp/boot.img", "of=/dev/block/mmcblk0p33"));
	# For HTC One Sprint
	#if file_getprop("/tmp/aroma-data/device.prop","selected.0") != "4" then
	#assert(package_extract_file("boot.img", "/tmp/boot.img"),
	#run_program("/sbin/dd", "if=/tmp/boot.img", "of=/dev/block/mmcblk0p33"));
	#endif;
	#if file_getprop("/tmp/aroma-data/device.prop","selected.0") == "4" then
	#assert(package_extract_file("additions/carriers/sprint/boot.img", "/tmp/boot.img"),
	#run_program("/sbin/dd", "if=/tmp/boot.img", "of=/dev/block/mmcblk0p35"));
	#endif;
ui_print("");
ui_print("");
ui_print(">>> Unmounting partitions");
set_progress(0.99);
	assert(unmount("/data") || ui_print("(data is unmounted already)"));
	assert(unmount("/system") || ui_print("(system is unmounted already)"));
ui_print("");
ui_print("");
ui_print("===================================");
ui_print("New ROM flashed successfully!      ");
ui_print("Please share your experience on XDA");
ui_print("===================================");
set_progress(1.0);
